// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/kcarretto/paragon/ent/predicate"
	"github.com/kcarretto/paragon/ent/tag"
)

// TagUpdate is the builder for updating Tag entities.
type TagUpdate struct {
	config
	Name           *string
	targets        map[int]struct{}
	tasks          map[int]struct{}
	jobs           map[int]struct{}
	removedTargets map[int]struct{}
	removedTasks   map[int]struct{}
	removedJobs    map[int]struct{}
	predicates     []predicate.Tag
}

// Where adds a new predicate for the builder.
func (tu *TagUpdate) Where(ps ...predicate.Tag) *TagUpdate {
	tu.predicates = append(tu.predicates, ps...)
	return tu
}

// SetName sets the Name field.
func (tu *TagUpdate) SetName(s string) *TagUpdate {
	tu.Name = &s
	return tu
}

// AddTargetIDs adds the targets edge to Target by ids.
func (tu *TagUpdate) AddTargetIDs(ids ...int) *TagUpdate {
	if tu.targets == nil {
		tu.targets = make(map[int]struct{})
	}
	for i := range ids {
		tu.targets[ids[i]] = struct{}{}
	}
	return tu
}

// AddTargets adds the targets edges to Target.
func (tu *TagUpdate) AddTargets(t ...*Target) *TagUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTargetIDs(ids...)
}

// AddTaskIDs adds the tasks edge to Task by ids.
func (tu *TagUpdate) AddTaskIDs(ids ...int) *TagUpdate {
	if tu.tasks == nil {
		tu.tasks = make(map[int]struct{})
	}
	for i := range ids {
		tu.tasks[ids[i]] = struct{}{}
	}
	return tu
}

// AddTasks adds the tasks edges to Task.
func (tu *TagUpdate) AddTasks(t ...*Task) *TagUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTaskIDs(ids...)
}

// AddJobIDs adds the jobs edge to Job by ids.
func (tu *TagUpdate) AddJobIDs(ids ...int) *TagUpdate {
	if tu.jobs == nil {
		tu.jobs = make(map[int]struct{})
	}
	for i := range ids {
		tu.jobs[ids[i]] = struct{}{}
	}
	return tu
}

// AddJobs adds the jobs edges to Job.
func (tu *TagUpdate) AddJobs(j ...*Job) *TagUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return tu.AddJobIDs(ids...)
}

// RemoveTargetIDs removes the targets edge to Target by ids.
func (tu *TagUpdate) RemoveTargetIDs(ids ...int) *TagUpdate {
	if tu.removedTargets == nil {
		tu.removedTargets = make(map[int]struct{})
	}
	for i := range ids {
		tu.removedTargets[ids[i]] = struct{}{}
	}
	return tu
}

// RemoveTargets removes targets edges to Target.
func (tu *TagUpdate) RemoveTargets(t ...*Target) *TagUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTargetIDs(ids...)
}

// RemoveTaskIDs removes the tasks edge to Task by ids.
func (tu *TagUpdate) RemoveTaskIDs(ids ...int) *TagUpdate {
	if tu.removedTasks == nil {
		tu.removedTasks = make(map[int]struct{})
	}
	for i := range ids {
		tu.removedTasks[ids[i]] = struct{}{}
	}
	return tu
}

// RemoveTasks removes tasks edges to Task.
func (tu *TagUpdate) RemoveTasks(t ...*Task) *TagUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTaskIDs(ids...)
}

// RemoveJobIDs removes the jobs edge to Job by ids.
func (tu *TagUpdate) RemoveJobIDs(ids ...int) *TagUpdate {
	if tu.removedJobs == nil {
		tu.removedJobs = make(map[int]struct{})
	}
	for i := range ids {
		tu.removedJobs[ids[i]] = struct{}{}
	}
	return tu
}

// RemoveJobs removes jobs edges to Job.
func (tu *TagUpdate) RemoveJobs(j ...*Job) *TagUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return tu.RemoveJobIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (tu *TagUpdate) Save(ctx context.Context) (int, error) {
	if tu.Name != nil {
		if err := tag.NameValidator(*tu.Name); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"Name\": %v", err)
		}
	}
	return tu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TagUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TagUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TagUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	selector := sql.Select(tag.FieldID).From(sql.Table(tag.Table))
	for _, p := range tu.predicates {
		p(selector)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = tu.driver.Query(ctx, query, args, rows); err != nil {
		return 0, err
	}
	defer rows.Close()
	var ids []int
	for rows.Next() {
		var id int
		if err := rows.Scan(&id); err != nil {
			return 0, fmt.Errorf("ent: failed reading id: %v", err)
		}
		ids = append(ids, id)
	}
	if len(ids) == 0 {
		return 0, nil
	}

	tx, err := tu.driver.Tx(ctx)
	if err != nil {
		return 0, err
	}
	var (
		res     sql.Result
		builder = sql.Update(tag.Table).Where(sql.InInts(tag.FieldID, ids...))
	)
	if value := tu.Name; value != nil {
		builder.Set(tag.FieldName, *value)
	}
	if !builder.Empty() {
		query, args := builder.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if len(tu.removedTargets) > 0 {
		eids := make([]int, len(tu.removedTargets))
		for eid := range tu.removedTargets {
			eids = append(eids, eid)
		}
		query, args := sql.Delete(tag.TargetsTable).
			Where(sql.InInts(tag.TargetsPrimaryKey[1], ids...)).
			Where(sql.InInts(tag.TargetsPrimaryKey[0], eids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if len(tu.targets) > 0 {
		values := make([][]int, 0, len(ids))
		for _, id := range ids {
			for eid := range tu.targets {
				values = append(values, []int{id, eid})
			}
		}
		builder := sql.Insert(tag.TargetsTable).
			Columns(tag.TargetsPrimaryKey[1], tag.TargetsPrimaryKey[0])
		for _, v := range values {
			builder.Values(v[0], v[1])
		}
		query, args := builder.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if len(tu.removedTasks) > 0 {
		eids := make([]int, len(tu.removedTasks))
		for eid := range tu.removedTasks {
			eids = append(eids, eid)
		}
		query, args := sql.Delete(tag.TasksTable).
			Where(sql.InInts(tag.TasksPrimaryKey[1], ids...)).
			Where(sql.InInts(tag.TasksPrimaryKey[0], eids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if len(tu.tasks) > 0 {
		values := make([][]int, 0, len(ids))
		for _, id := range ids {
			for eid := range tu.tasks {
				values = append(values, []int{id, eid})
			}
		}
		builder := sql.Insert(tag.TasksTable).
			Columns(tag.TasksPrimaryKey[1], tag.TasksPrimaryKey[0])
		for _, v := range values {
			builder.Values(v[0], v[1])
		}
		query, args := builder.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if len(tu.removedJobs) > 0 {
		eids := make([]int, len(tu.removedJobs))
		for eid := range tu.removedJobs {
			eids = append(eids, eid)
		}
		query, args := sql.Delete(tag.JobsTable).
			Where(sql.InInts(tag.JobsPrimaryKey[1], ids...)).
			Where(sql.InInts(tag.JobsPrimaryKey[0], eids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if len(tu.jobs) > 0 {
		values := make([][]int, 0, len(ids))
		for _, id := range ids {
			for eid := range tu.jobs {
				values = append(values, []int{id, eid})
			}
		}
		builder := sql.Insert(tag.JobsTable).
			Columns(tag.JobsPrimaryKey[1], tag.JobsPrimaryKey[0])
		for _, v := range values {
			builder.Values(v[0], v[1])
		}
		query, args := builder.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if err = tx.Commit(); err != nil {
		return 0, err
	}
	return len(ids), nil
}

// TagUpdateOne is the builder for updating a single Tag entity.
type TagUpdateOne struct {
	config
	id             int
	Name           *string
	targets        map[int]struct{}
	tasks          map[int]struct{}
	jobs           map[int]struct{}
	removedTargets map[int]struct{}
	removedTasks   map[int]struct{}
	removedJobs    map[int]struct{}
}

// SetName sets the Name field.
func (tuo *TagUpdateOne) SetName(s string) *TagUpdateOne {
	tuo.Name = &s
	return tuo
}

// AddTargetIDs adds the targets edge to Target by ids.
func (tuo *TagUpdateOne) AddTargetIDs(ids ...int) *TagUpdateOne {
	if tuo.targets == nil {
		tuo.targets = make(map[int]struct{})
	}
	for i := range ids {
		tuo.targets[ids[i]] = struct{}{}
	}
	return tuo
}

// AddTargets adds the targets edges to Target.
func (tuo *TagUpdateOne) AddTargets(t ...*Target) *TagUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTargetIDs(ids...)
}

// AddTaskIDs adds the tasks edge to Task by ids.
func (tuo *TagUpdateOne) AddTaskIDs(ids ...int) *TagUpdateOne {
	if tuo.tasks == nil {
		tuo.tasks = make(map[int]struct{})
	}
	for i := range ids {
		tuo.tasks[ids[i]] = struct{}{}
	}
	return tuo
}

// AddTasks adds the tasks edges to Task.
func (tuo *TagUpdateOne) AddTasks(t ...*Task) *TagUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTaskIDs(ids...)
}

// AddJobIDs adds the jobs edge to Job by ids.
func (tuo *TagUpdateOne) AddJobIDs(ids ...int) *TagUpdateOne {
	if tuo.jobs == nil {
		tuo.jobs = make(map[int]struct{})
	}
	for i := range ids {
		tuo.jobs[ids[i]] = struct{}{}
	}
	return tuo
}

// AddJobs adds the jobs edges to Job.
func (tuo *TagUpdateOne) AddJobs(j ...*Job) *TagUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return tuo.AddJobIDs(ids...)
}

// RemoveTargetIDs removes the targets edge to Target by ids.
func (tuo *TagUpdateOne) RemoveTargetIDs(ids ...int) *TagUpdateOne {
	if tuo.removedTargets == nil {
		tuo.removedTargets = make(map[int]struct{})
	}
	for i := range ids {
		tuo.removedTargets[ids[i]] = struct{}{}
	}
	return tuo
}

// RemoveTargets removes targets edges to Target.
func (tuo *TagUpdateOne) RemoveTargets(t ...*Target) *TagUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTargetIDs(ids...)
}

// RemoveTaskIDs removes the tasks edge to Task by ids.
func (tuo *TagUpdateOne) RemoveTaskIDs(ids ...int) *TagUpdateOne {
	if tuo.removedTasks == nil {
		tuo.removedTasks = make(map[int]struct{})
	}
	for i := range ids {
		tuo.removedTasks[ids[i]] = struct{}{}
	}
	return tuo
}

// RemoveTasks removes tasks edges to Task.
func (tuo *TagUpdateOne) RemoveTasks(t ...*Task) *TagUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTaskIDs(ids...)
}

// RemoveJobIDs removes the jobs edge to Job by ids.
func (tuo *TagUpdateOne) RemoveJobIDs(ids ...int) *TagUpdateOne {
	if tuo.removedJobs == nil {
		tuo.removedJobs = make(map[int]struct{})
	}
	for i := range ids {
		tuo.removedJobs[ids[i]] = struct{}{}
	}
	return tuo
}

// RemoveJobs removes jobs edges to Job.
func (tuo *TagUpdateOne) RemoveJobs(j ...*Job) *TagUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return tuo.RemoveJobIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (tuo *TagUpdateOne) Save(ctx context.Context) (*Tag, error) {
	if tuo.Name != nil {
		if err := tag.NameValidator(*tuo.Name); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"Name\": %v", err)
		}
	}
	return tuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TagUpdateOne) SaveX(ctx context.Context) *Tag {
	t, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return t
}

// Exec executes the query on the entity.
func (tuo *TagUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TagUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TagUpdateOne) sqlSave(ctx context.Context) (t *Tag, err error) {
	selector := sql.Select(tag.Columns...).From(sql.Table(tag.Table))
	tag.ID(tuo.id)(selector)
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = tuo.driver.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()
	var ids []int
	for rows.Next() {
		var id int
		t = &Tag{config: tuo.config}
		if err := t.FromRows(rows); err != nil {
			return nil, fmt.Errorf("ent: failed scanning row into Tag: %v", err)
		}
		id = t.ID
		ids = append(ids, id)
	}
	switch n := len(ids); {
	case n == 0:
		return nil, &ErrNotFound{fmt.Sprintf("Tag with id: %v", tuo.id)}
	case n > 1:
		return nil, fmt.Errorf("ent: more than one Tag with the same id: %v", tuo.id)
	}

	tx, err := tuo.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	var (
		res     sql.Result
		builder = sql.Update(tag.Table).Where(sql.InInts(tag.FieldID, ids...))
	)
	if value := tuo.Name; value != nil {
		builder.Set(tag.FieldName, *value)
		t.Name = *value
	}
	if !builder.Empty() {
		query, args := builder.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if len(tuo.removedTargets) > 0 {
		eids := make([]int, len(tuo.removedTargets))
		for eid := range tuo.removedTargets {
			eids = append(eids, eid)
		}
		query, args := sql.Delete(tag.TargetsTable).
			Where(sql.InInts(tag.TargetsPrimaryKey[1], ids...)).
			Where(sql.InInts(tag.TargetsPrimaryKey[0], eids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if len(tuo.targets) > 0 {
		values := make([][]int, 0, len(ids))
		for _, id := range ids {
			for eid := range tuo.targets {
				values = append(values, []int{id, eid})
			}
		}
		builder := sql.Insert(tag.TargetsTable).
			Columns(tag.TargetsPrimaryKey[1], tag.TargetsPrimaryKey[0])
		for _, v := range values {
			builder.Values(v[0], v[1])
		}
		query, args := builder.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if len(tuo.removedTasks) > 0 {
		eids := make([]int, len(tuo.removedTasks))
		for eid := range tuo.removedTasks {
			eids = append(eids, eid)
		}
		query, args := sql.Delete(tag.TasksTable).
			Where(sql.InInts(tag.TasksPrimaryKey[1], ids...)).
			Where(sql.InInts(tag.TasksPrimaryKey[0], eids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if len(tuo.tasks) > 0 {
		values := make([][]int, 0, len(ids))
		for _, id := range ids {
			for eid := range tuo.tasks {
				values = append(values, []int{id, eid})
			}
		}
		builder := sql.Insert(tag.TasksTable).
			Columns(tag.TasksPrimaryKey[1], tag.TasksPrimaryKey[0])
		for _, v := range values {
			builder.Values(v[0], v[1])
		}
		query, args := builder.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if len(tuo.removedJobs) > 0 {
		eids := make([]int, len(tuo.removedJobs))
		for eid := range tuo.removedJobs {
			eids = append(eids, eid)
		}
		query, args := sql.Delete(tag.JobsTable).
			Where(sql.InInts(tag.JobsPrimaryKey[1], ids...)).
			Where(sql.InInts(tag.JobsPrimaryKey[0], eids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if len(tuo.jobs) > 0 {
		values := make([][]int, 0, len(ids))
		for _, id := range ids {
			for eid := range tuo.jobs {
				values = append(values, []int{id, eid})
			}
		}
		builder := sql.Insert(tag.JobsTable).
			Columns(tag.JobsPrimaryKey[1], tag.JobsPrimaryKey[0])
		for _, v := range values {
			builder.Values(v[0], v[1])
		}
		query, args := builder.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if err = tx.Commit(); err != nil {
		return nil, err
	}
	return t, nil
}
