// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
)

// Credential is the model entity for the Credential schema.
type Credential struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Principal holds the value of the "principal" field.
	Principal string `json:"principal,omitempty"`
	// Secret holds the value of the "secret" field.
	Secret string `json:"secret,omitempty"`
	// Fails holds the value of the "fails" field.
	Fails int `json:"fails,omitempty"`
}

// FromRows scans the sql response data into Credential.
func (c *Credential) FromRows(rows *sql.Rows) error {
	var vc struct {
		ID        int
		Principal sql.NullString
		Secret    sql.NullString
		Fails     sql.NullInt64
	}
	// the order here should be the same as in the `credential.Columns`.
	if err := rows.Scan(
		&vc.ID,
		&vc.Principal,
		&vc.Secret,
		&vc.Fails,
	); err != nil {
		return err
	}
	c.ID = vc.ID
	c.Principal = vc.Principal.String
	c.Secret = vc.Secret.String
	c.Fails = int(vc.Fails.Int64)
	return nil
}

// Update returns a builder for updating this Credential.
// Note that, you need to call Credential.Unwrap() before calling this method, if this Credential
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Credential) Update() *CredentialUpdateOne {
	return (&CredentialClient{c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Credential) Unwrap() *Credential {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Credential is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Credential) String() string {
	var builder strings.Builder
	builder.WriteString("Credential(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", principal=")
	builder.WriteString(c.Principal)
	builder.WriteString(", secret=")
	builder.WriteString(c.Secret)
	builder.WriteString(", fails=")
	builder.WriteString(fmt.Sprintf("%v", c.Fails))
	builder.WriteByte(')')
	return builder.String()
}

// Credentials is a parsable slice of Credential.
type Credentials []*Credential

// FromRows scans the sql response data into Credentials.
func (c *Credentials) FromRows(rows *sql.Rows) error {
	for rows.Next() {
		vc := &Credential{}
		if err := vc.FromRows(rows); err != nil {
			return err
		}
		*c = append(*c, vc)
	}
	return nil
}

func (c Credentials) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
