// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
)

// Tag is the model entity for the Tag schema.
type Tag struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
}

// FromRows scans the sql response data into Tag.
func (t *Tag) FromRows(rows *sql.Rows) error {
	var vt struct {
		ID   int
		Name sql.NullString
	}
	// the order here should be the same as in the `tag.Columns`.
	if err := rows.Scan(
		&vt.ID,
		&vt.Name,
	); err != nil {
		return err
	}
	t.ID = vt.ID
	t.Name = vt.Name.String
	return nil
}

// QueryTargets queries the targets edge of the Tag.
func (t *Tag) QueryTargets() *TargetQuery {
	return (&TagClient{t.config}).QueryTargets(t)
}

// QueryTasks queries the tasks edge of the Tag.
func (t *Tag) QueryTasks() *TaskQuery {
	return (&TagClient{t.config}).QueryTasks(t)
}

// QueryJobs queries the jobs edge of the Tag.
func (t *Tag) QueryJobs() *JobQuery {
	return (&TagClient{t.config}).QueryJobs(t)
}

// Update returns a builder for updating this Tag.
// Note that, you need to call Tag.Unwrap() before calling this method, if this Tag
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tag) Update() *TagUpdateOne {
	return (&TagClient{t.config}).UpdateOne(t)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (t *Tag) Unwrap() *Tag {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tag is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tag) String() string {
	var builder strings.Builder
	builder.WriteString("Tag(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", Name=")
	builder.WriteString(t.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Tags is a parsable slice of Tag.
type Tags []*Tag

// FromRows scans the sql response data into Tags.
func (t *Tags) FromRows(rows *sql.Rows) error {
	for rows.Next() {
		vt := &Tag{}
		if err := vt.FromRows(rows); err != nil {
			return err
		}
		*t = append(*t, vt)
	}
	return nil
}

func (t Tags) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
