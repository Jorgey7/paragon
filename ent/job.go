// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
)

// Job is the model entity for the Job schema.
type Job struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Content holds the value of the "Content" field.
	Content string `json:"Content,omitempty"`
}

// FromRows scans the sql response data into Job.
func (j *Job) FromRows(rows *sql.Rows) error {
	var vj struct {
		ID      int
		Name    sql.NullString
		Content sql.NullString
	}
	// the order here should be the same as in the `job.Columns`.
	if err := rows.Scan(
		&vj.ID,
		&vj.Name,
		&vj.Content,
	); err != nil {
		return err
	}
	j.ID = vj.ID
	j.Name = vj.Name.String
	j.Content = vj.Content.String
	return nil
}

// QueryTasks queries the tasks edge of the Job.
func (j *Job) QueryTasks() *TaskQuery {
	return (&JobClient{j.config}).QueryTasks(j)
}

// QueryTags queries the tags edge of the Job.
func (j *Job) QueryTags() *TagQuery {
	return (&JobClient{j.config}).QueryTags(j)
}

// Update returns a builder for updating this Job.
// Note that, you need to call Job.Unwrap() before calling this method, if this Job
// was returned from a transaction, and the transaction was committed or rolled back.
func (j *Job) Update() *JobUpdateOne {
	return (&JobClient{j.config}).UpdateOne(j)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (j *Job) Unwrap() *Job {
	tx, ok := j.config.driver.(*txDriver)
	if !ok {
		panic("ent: Job is not a transactional entity")
	}
	j.config.driver = tx.drv
	return j
}

// String implements the fmt.Stringer.
func (j *Job) String() string {
	var builder strings.Builder
	builder.WriteString("Job(")
	builder.WriteString(fmt.Sprintf("id=%v", j.ID))
	builder.WriteString(", Name=")
	builder.WriteString(j.Name)
	builder.WriteString(", Content=")
	builder.WriteString(j.Content)
	builder.WriteByte(')')
	return builder.String()
}

// Jobs is a parsable slice of Job.
type Jobs []*Job

// FromRows scans the sql response data into Jobs.
func (j *Jobs) FromRows(rows *sql.Rows) error {
	for rows.Next() {
		vj := &Job{}
		if err := vj.FromRows(rows); err != nil {
			return err
		}
		*j = append(*j, vj)
	}
	return nil
}

func (j Jobs) config(cfg config) {
	for _i := range j {
		j[_i].config = cfg
	}
}
