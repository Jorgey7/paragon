// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
)

// Task is the model entity for the Task schema.
type Task struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// QueueTime holds the value of the "QueueTime" field.
	QueueTime time.Time `json:"QueueTime,omitempty"`
	// ClaimTime holds the value of the "ClaimTime" field.
	ClaimTime time.Time `json:"ClaimTime,omitempty"`
	// ExecStartTime holds the value of the "ExecStartTime" field.
	ExecStartTime time.Time `json:"ExecStartTime,omitempty"`
	// ExecStopTime holds the value of the "ExecStopTime" field.
	ExecStopTime time.Time `json:"ExecStopTime,omitempty"`
	// Content holds the value of the "Content" field.
	Content string `json:"Content,omitempty"`
	// Output holds the value of the "Output" field.
	Output []string `json:"Output,omitempty"`
	// Error holds the value of the "Error" field.
	Error string `json:"Error,omitempty"`
	// SessionID holds the value of the "SessionID" field.
	SessionID string `json:"SessionID,omitempty"`
}

// FromRows scans the sql response data into Task.
func (t *Task) FromRows(rows *sql.Rows) error {
	var vt struct {
		ID            int
		QueueTime     sql.NullTime
		ClaimTime     sql.NullTime
		ExecStartTime sql.NullTime
		ExecStopTime  sql.NullTime
		Content       sql.NullString
		Output        []byte
		Error         sql.NullString
		SessionID     sql.NullString
	}
	// the order here should be the same as in the `task.Columns`.
	if err := rows.Scan(
		&vt.ID,
		&vt.QueueTime,
		&vt.ClaimTime,
		&vt.ExecStartTime,
		&vt.ExecStopTime,
		&vt.Content,
		&vt.Output,
		&vt.Error,
		&vt.SessionID,
	); err != nil {
		return err
	}
	t.ID = vt.ID
	t.QueueTime = vt.QueueTime.Time
	t.ClaimTime = vt.ClaimTime.Time
	t.ExecStartTime = vt.ExecStartTime.Time
	t.ExecStopTime = vt.ExecStopTime.Time
	t.Content = vt.Content.String
	if value := vt.Output; len(value) > 0 {
		if err := json.Unmarshal(value, &t.Output); err != nil {
			return fmt.Errorf("unmarshal field Output: %v", err)
		}
	}
	t.Error = vt.Error.String
	t.SessionID = vt.SessionID.String
	return nil
}

// QueryTags queries the tags edge of the Task.
func (t *Task) QueryTags() *TagQuery {
	return (&TaskClient{t.config}).QueryTags(t)
}

// QueryJob queries the job edge of the Task.
func (t *Task) QueryJob() *JobQuery {
	return (&TaskClient{t.config}).QueryJob(t)
}

// Update returns a builder for updating this Task.
// Note that, you need to call Task.Unwrap() before calling this method, if this Task
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Task) Update() *TaskUpdateOne {
	return (&TaskClient{t.config}).UpdateOne(t)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (t *Task) Unwrap() *Task {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Task is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Task) String() string {
	var builder strings.Builder
	builder.WriteString("Task(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", QueueTime=")
	builder.WriteString(t.QueueTime.Format(time.ANSIC))
	builder.WriteString(", ClaimTime=")
	builder.WriteString(t.ClaimTime.Format(time.ANSIC))
	builder.WriteString(", ExecStartTime=")
	builder.WriteString(t.ExecStartTime.Format(time.ANSIC))
	builder.WriteString(", ExecStopTime=")
	builder.WriteString(t.ExecStopTime.Format(time.ANSIC))
	builder.WriteString(", Content=")
	builder.WriteString(t.Content)
	builder.WriteString(", Output=")
	builder.WriteString(fmt.Sprintf("%v", t.Output))
	builder.WriteString(", Error=")
	builder.WriteString(t.Error)
	builder.WriteString(", SessionID=")
	builder.WriteString(t.SessionID)
	builder.WriteByte(')')
	return builder.String()
}

// Tasks is a parsable slice of Task.
type Tasks []*Task

// FromRows scans the sql response data into Tasks.
func (t *Tasks) FromRows(rows *sql.Rows) error {
	for rows.Next() {
		vt := &Task{}
		if err := vt.FromRows(rows); err != nil {
			return err
		}
		*t = append(*t, vt)
	}
	return nil
}

func (t Tasks) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
