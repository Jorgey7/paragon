// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/kcarretto/paragon/ent/job"
	"github.com/kcarretto/paragon/ent/predicate"
	"github.com/kcarretto/paragon/ent/task"
)

// JobUpdate is the builder for updating Job entities.
type JobUpdate struct {
	config
	Name         *string
	Content      *string
	tasks        map[int]struct{}
	tags         map[int]struct{}
	removedTasks map[int]struct{}
	removedTags  map[int]struct{}
	predicates   []predicate.Job
}

// Where adds a new predicate for the builder.
func (ju *JobUpdate) Where(ps ...predicate.Job) *JobUpdate {
	ju.predicates = append(ju.predicates, ps...)
	return ju
}

// SetName sets the Name field.
func (ju *JobUpdate) SetName(s string) *JobUpdate {
	ju.Name = &s
	return ju
}

// SetContent sets the Content field.
func (ju *JobUpdate) SetContent(s string) *JobUpdate {
	ju.Content = &s
	return ju
}

// AddTaskIDs adds the tasks edge to Task by ids.
func (ju *JobUpdate) AddTaskIDs(ids ...int) *JobUpdate {
	if ju.tasks == nil {
		ju.tasks = make(map[int]struct{})
	}
	for i := range ids {
		ju.tasks[ids[i]] = struct{}{}
	}
	return ju
}

// AddTasks adds the tasks edges to Task.
func (ju *JobUpdate) AddTasks(t ...*Task) *JobUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ju.AddTaskIDs(ids...)
}

// AddTagIDs adds the tags edge to Tag by ids.
func (ju *JobUpdate) AddTagIDs(ids ...int) *JobUpdate {
	if ju.tags == nil {
		ju.tags = make(map[int]struct{})
	}
	for i := range ids {
		ju.tags[ids[i]] = struct{}{}
	}
	return ju
}

// AddTags adds the tags edges to Tag.
func (ju *JobUpdate) AddTags(t ...*Tag) *JobUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ju.AddTagIDs(ids...)
}

// RemoveTaskIDs removes the tasks edge to Task by ids.
func (ju *JobUpdate) RemoveTaskIDs(ids ...int) *JobUpdate {
	if ju.removedTasks == nil {
		ju.removedTasks = make(map[int]struct{})
	}
	for i := range ids {
		ju.removedTasks[ids[i]] = struct{}{}
	}
	return ju
}

// RemoveTasks removes tasks edges to Task.
func (ju *JobUpdate) RemoveTasks(t ...*Task) *JobUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ju.RemoveTaskIDs(ids...)
}

// RemoveTagIDs removes the tags edge to Tag by ids.
func (ju *JobUpdate) RemoveTagIDs(ids ...int) *JobUpdate {
	if ju.removedTags == nil {
		ju.removedTags = make(map[int]struct{})
	}
	for i := range ids {
		ju.removedTags[ids[i]] = struct{}{}
	}
	return ju
}

// RemoveTags removes tags edges to Tag.
func (ju *JobUpdate) RemoveTags(t ...*Tag) *JobUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ju.RemoveTagIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ju *JobUpdate) Save(ctx context.Context) (int, error) {
	if ju.Name != nil {
		if err := job.NameValidator(*ju.Name); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"Name\": %v", err)
		}
	}
	if ju.Content != nil {
		if err := job.ContentValidator(*ju.Content); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"Content\": %v", err)
		}
	}
	return ju.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (ju *JobUpdate) SaveX(ctx context.Context) int {
	affected, err := ju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ju *JobUpdate) Exec(ctx context.Context) error {
	_, err := ju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ju *JobUpdate) ExecX(ctx context.Context) {
	if err := ju.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ju *JobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	selector := sql.Select(job.FieldID).From(sql.Table(job.Table))
	for _, p := range ju.predicates {
		p(selector)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = ju.driver.Query(ctx, query, args, rows); err != nil {
		return 0, err
	}
	defer rows.Close()
	var ids []int
	for rows.Next() {
		var id int
		if err := rows.Scan(&id); err != nil {
			return 0, fmt.Errorf("ent: failed reading id: %v", err)
		}
		ids = append(ids, id)
	}
	if len(ids) == 0 {
		return 0, nil
	}

	tx, err := ju.driver.Tx(ctx)
	if err != nil {
		return 0, err
	}
	var (
		res     sql.Result
		builder = sql.Update(job.Table).Where(sql.InInts(job.FieldID, ids...))
	)
	if value := ju.Name; value != nil {
		builder.Set(job.FieldName, *value)
	}
	if value := ju.Content; value != nil {
		builder.Set(job.FieldContent, *value)
	}
	if !builder.Empty() {
		query, args := builder.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if len(ju.removedTasks) > 0 {
		eids := make([]int, len(ju.removedTasks))
		for eid := range ju.removedTasks {
			eids = append(eids, eid)
		}
		query, args := sql.Update(job.TasksTable).
			SetNull(job.TasksColumn).
			Where(sql.InInts(job.TasksColumn, ids...)).
			Where(sql.InInts(task.FieldID, eids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if len(ju.tasks) > 0 {
		for _, id := range ids {
			p := sql.P()
			for eid := range ju.tasks {
				p.Or().EQ(task.FieldID, eid)
			}
			query, args := sql.Update(job.TasksTable).
				Set(job.TasksColumn, id).
				Where(sql.And(p, sql.IsNull(job.TasksColumn))).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return 0, rollback(tx, err)
			}
			affected, err := res.RowsAffected()
			if err != nil {
				return 0, rollback(tx, err)
			}
			if int(affected) < len(ju.tasks) {
				return 0, rollback(tx, &ErrConstraintFailed{msg: fmt.Sprintf("one of \"tasks\" %v already connected to a different \"Job\"", keys(ju.tasks))})
			}
		}
	}
	if len(ju.removedTags) > 0 {
		eids := make([]int, len(ju.removedTags))
		for eid := range ju.removedTags {
			eids = append(eids, eid)
		}
		query, args := sql.Delete(job.TagsTable).
			Where(sql.InInts(job.TagsPrimaryKey[0], ids...)).
			Where(sql.InInts(job.TagsPrimaryKey[1], eids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if len(ju.tags) > 0 {
		values := make([][]int, 0, len(ids))
		for _, id := range ids {
			for eid := range ju.tags {
				values = append(values, []int{id, eid})
			}
		}
		builder := sql.Insert(job.TagsTable).
			Columns(job.TagsPrimaryKey[0], job.TagsPrimaryKey[1])
		for _, v := range values {
			builder.Values(v[0], v[1])
		}
		query, args := builder.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if err = tx.Commit(); err != nil {
		return 0, err
	}
	return len(ids), nil
}

// JobUpdateOne is the builder for updating a single Job entity.
type JobUpdateOne struct {
	config
	id           int
	Name         *string
	Content      *string
	tasks        map[int]struct{}
	tags         map[int]struct{}
	removedTasks map[int]struct{}
	removedTags  map[int]struct{}
}

// SetName sets the Name field.
func (juo *JobUpdateOne) SetName(s string) *JobUpdateOne {
	juo.Name = &s
	return juo
}

// SetContent sets the Content field.
func (juo *JobUpdateOne) SetContent(s string) *JobUpdateOne {
	juo.Content = &s
	return juo
}

// AddTaskIDs adds the tasks edge to Task by ids.
func (juo *JobUpdateOne) AddTaskIDs(ids ...int) *JobUpdateOne {
	if juo.tasks == nil {
		juo.tasks = make(map[int]struct{})
	}
	for i := range ids {
		juo.tasks[ids[i]] = struct{}{}
	}
	return juo
}

// AddTasks adds the tasks edges to Task.
func (juo *JobUpdateOne) AddTasks(t ...*Task) *JobUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return juo.AddTaskIDs(ids...)
}

// AddTagIDs adds the tags edge to Tag by ids.
func (juo *JobUpdateOne) AddTagIDs(ids ...int) *JobUpdateOne {
	if juo.tags == nil {
		juo.tags = make(map[int]struct{})
	}
	for i := range ids {
		juo.tags[ids[i]] = struct{}{}
	}
	return juo
}

// AddTags adds the tags edges to Tag.
func (juo *JobUpdateOne) AddTags(t ...*Tag) *JobUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return juo.AddTagIDs(ids...)
}

// RemoveTaskIDs removes the tasks edge to Task by ids.
func (juo *JobUpdateOne) RemoveTaskIDs(ids ...int) *JobUpdateOne {
	if juo.removedTasks == nil {
		juo.removedTasks = make(map[int]struct{})
	}
	for i := range ids {
		juo.removedTasks[ids[i]] = struct{}{}
	}
	return juo
}

// RemoveTasks removes tasks edges to Task.
func (juo *JobUpdateOne) RemoveTasks(t ...*Task) *JobUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return juo.RemoveTaskIDs(ids...)
}

// RemoveTagIDs removes the tags edge to Tag by ids.
func (juo *JobUpdateOne) RemoveTagIDs(ids ...int) *JobUpdateOne {
	if juo.removedTags == nil {
		juo.removedTags = make(map[int]struct{})
	}
	for i := range ids {
		juo.removedTags[ids[i]] = struct{}{}
	}
	return juo
}

// RemoveTags removes tags edges to Tag.
func (juo *JobUpdateOne) RemoveTags(t ...*Tag) *JobUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return juo.RemoveTagIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (juo *JobUpdateOne) Save(ctx context.Context) (*Job, error) {
	if juo.Name != nil {
		if err := job.NameValidator(*juo.Name); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"Name\": %v", err)
		}
	}
	if juo.Content != nil {
		if err := job.ContentValidator(*juo.Content); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"Content\": %v", err)
		}
	}
	return juo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (juo *JobUpdateOne) SaveX(ctx context.Context) *Job {
	j, err := juo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return j
}

// Exec executes the query on the entity.
func (juo *JobUpdateOne) Exec(ctx context.Context) error {
	_, err := juo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (juo *JobUpdateOne) ExecX(ctx context.Context) {
	if err := juo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (juo *JobUpdateOne) sqlSave(ctx context.Context) (j *Job, err error) {
	selector := sql.Select(job.Columns...).From(sql.Table(job.Table))
	job.ID(juo.id)(selector)
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = juo.driver.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()
	var ids []int
	for rows.Next() {
		var id int
		j = &Job{config: juo.config}
		if err := j.FromRows(rows); err != nil {
			return nil, fmt.Errorf("ent: failed scanning row into Job: %v", err)
		}
		id = j.ID
		ids = append(ids, id)
	}
	switch n := len(ids); {
	case n == 0:
		return nil, &ErrNotFound{fmt.Sprintf("Job with id: %v", juo.id)}
	case n > 1:
		return nil, fmt.Errorf("ent: more than one Job with the same id: %v", juo.id)
	}

	tx, err := juo.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	var (
		res     sql.Result
		builder = sql.Update(job.Table).Where(sql.InInts(job.FieldID, ids...))
	)
	if value := juo.Name; value != nil {
		builder.Set(job.FieldName, *value)
		j.Name = *value
	}
	if value := juo.Content; value != nil {
		builder.Set(job.FieldContent, *value)
		j.Content = *value
	}
	if !builder.Empty() {
		query, args := builder.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if len(juo.removedTasks) > 0 {
		eids := make([]int, len(juo.removedTasks))
		for eid := range juo.removedTasks {
			eids = append(eids, eid)
		}
		query, args := sql.Update(job.TasksTable).
			SetNull(job.TasksColumn).
			Where(sql.InInts(job.TasksColumn, ids...)).
			Where(sql.InInts(task.FieldID, eids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if len(juo.tasks) > 0 {
		for _, id := range ids {
			p := sql.P()
			for eid := range juo.tasks {
				p.Or().EQ(task.FieldID, eid)
			}
			query, args := sql.Update(job.TasksTable).
				Set(job.TasksColumn, id).
				Where(sql.And(p, sql.IsNull(job.TasksColumn))).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return nil, rollback(tx, err)
			}
			affected, err := res.RowsAffected()
			if err != nil {
				return nil, rollback(tx, err)
			}
			if int(affected) < len(juo.tasks) {
				return nil, rollback(tx, &ErrConstraintFailed{msg: fmt.Sprintf("one of \"tasks\" %v already connected to a different \"Job\"", keys(juo.tasks))})
			}
		}
	}
	if len(juo.removedTags) > 0 {
		eids := make([]int, len(juo.removedTags))
		for eid := range juo.removedTags {
			eids = append(eids, eid)
		}
		query, args := sql.Delete(job.TagsTable).
			Where(sql.InInts(job.TagsPrimaryKey[0], ids...)).
			Where(sql.InInts(job.TagsPrimaryKey[1], eids...)).
			Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if len(juo.tags) > 0 {
		values := make([][]int, 0, len(ids))
		for _, id := range ids {
			for eid := range juo.tags {
				values = append(values, []int{id, eid})
			}
		}
		builder := sql.Insert(job.TagsTable).
			Columns(job.TagsPrimaryKey[0], job.TagsPrimaryKey[1])
		for _, v := range values {
			builder.Values(v[0], v[1])
		}
		query, args := builder.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if err = tx.Commit(); err != nil {
		return nil, err
	}
	return j, nil
}
