// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/kcarretto/paragon/ent/tag"
)

// TagCreate is the builder for creating a Tag entity.
type TagCreate struct {
	config
	Name    *string
	targets map[int]struct{}
	tasks   map[int]struct{}
	jobs    map[int]struct{}
}

// SetName sets the Name field.
func (tc *TagCreate) SetName(s string) *TagCreate {
	tc.Name = &s
	return tc
}

// AddTargetIDs adds the targets edge to Target by ids.
func (tc *TagCreate) AddTargetIDs(ids ...int) *TagCreate {
	if tc.targets == nil {
		tc.targets = make(map[int]struct{})
	}
	for i := range ids {
		tc.targets[ids[i]] = struct{}{}
	}
	return tc
}

// AddTargets adds the targets edges to Target.
func (tc *TagCreate) AddTargets(t ...*Target) *TagCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTargetIDs(ids...)
}

// AddTaskIDs adds the tasks edge to Task by ids.
func (tc *TagCreate) AddTaskIDs(ids ...int) *TagCreate {
	if tc.tasks == nil {
		tc.tasks = make(map[int]struct{})
	}
	for i := range ids {
		tc.tasks[ids[i]] = struct{}{}
	}
	return tc
}

// AddTasks adds the tasks edges to Task.
func (tc *TagCreate) AddTasks(t ...*Task) *TagCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTaskIDs(ids...)
}

// AddJobIDs adds the jobs edge to Job by ids.
func (tc *TagCreate) AddJobIDs(ids ...int) *TagCreate {
	if tc.jobs == nil {
		tc.jobs = make(map[int]struct{})
	}
	for i := range ids {
		tc.jobs[ids[i]] = struct{}{}
	}
	return tc
}

// AddJobs adds the jobs edges to Job.
func (tc *TagCreate) AddJobs(j ...*Job) *TagCreate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return tc.AddJobIDs(ids...)
}

// Save creates the Tag in the database.
func (tc *TagCreate) Save(ctx context.Context) (*Tag, error) {
	if tc.Name == nil {
		return nil, errors.New("ent: missing required field \"Name\"")
	}
	if err := tag.NameValidator(*tc.Name); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"Name\": %v", err)
	}
	return tc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TagCreate) SaveX(ctx context.Context) *Tag {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tc *TagCreate) sqlSave(ctx context.Context) (*Tag, error) {
	var (
		res sql.Result
		t   = &Tag{config: tc.config}
	)
	tx, err := tc.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	builder := sql.Dialect(tc.driver.Dialect()).
		Insert(tag.Table).
		Default()
	if value := tc.Name; value != nil {
		builder.Set(tag.FieldName, *value)
		t.Name = *value
	}
	query, args := builder.Query()
	if err := tx.Exec(ctx, query, args, &res); err != nil {
		return nil, rollback(tx, err)
	}
	id, err := res.LastInsertId()
	if err != nil {
		return nil, rollback(tx, err)
	}
	t.ID = int(id)
	if len(tc.targets) > 0 {
		for eid := range tc.targets {

			query, args := sql.Insert(tag.TargetsTable).
				Columns(tag.TargetsPrimaryKey[1], tag.TargetsPrimaryKey[0]).
				Values(id, eid).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return nil, rollback(tx, err)
			}
		}
	}
	if len(tc.tasks) > 0 {
		for eid := range tc.tasks {

			query, args := sql.Insert(tag.TasksTable).
				Columns(tag.TasksPrimaryKey[1], tag.TasksPrimaryKey[0]).
				Values(id, eid).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return nil, rollback(tx, err)
			}
		}
	}
	if len(tc.jobs) > 0 {
		for eid := range tc.jobs {

			query, args := sql.Insert(tag.JobsTable).
				Columns(tag.JobsPrimaryKey[1], tag.JobsPrimaryKey[0]).
				Values(id, eid).
				Query()
			if err := tx.Exec(ctx, query, args, &res); err != nil {
				return nil, rollback(tx, err)
			}
		}
	}
	if err := tx.Commit(); err != nil {
		return nil, err
	}
	return t, nil
}
