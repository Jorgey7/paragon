syntax = "proto3";

package targets;

/*
 * Golang Options
 */

// Install: go get -u github.com/gogo/protobuf@v1.3.1
import "gogoproto/gogo.proto";

// Tests
option (gogoproto.equal_all) = true;
option (gogoproto.populate_all) = true;
option (gogoproto.testgen_all) = true;

// Performance
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.sizer_all) = true;

// Enable registration with golang/protobuf for the grpc-gateway.
option (gogoproto.goproto_registration) = true;
// Enable generation of XXX_MessageName methods for grpc-go/status.
option (gogoproto.messagename_all) = true;

/*
 * gRPC Gateway Options
 */

// Install: go get -u github.com/gogo/googleapis@v1.3.0
import "google/api/annotations.proto";

/*
 * TODO: @cictrone
 */
service Targets {
    /*
     * TODO: @cictrone
     */
    rpc Fetch(FetchRequest) returns (FetchResponse) {
        option (google.api.http) = {
            get: "/api/v1/targets/{id}"
        };
    }

    /*
     * TODO: @cictrone
     */
    rpc Find(FindRequest) returns (FindResponse) {
        option (google.api.http) = {
            get: "/api/v1/targets"
        };
    }

    /*
     * TODO: @cictrone
     */
    rpc Create(CreateRequest) returns (CreateResponse) {
        option (google.api.http) = {
            post: "/api/v1/targets/create"
            body: "*"
        };
    }

    /*
     * TODO: @cictrone
     */
     rpc SetTargetFields(SetTargetFieldsRequest) returns (SetTargetFieldsResponse) {
        option (google.api.http) = {
            post: "/api/v1/targets/setTargetFields"
            body: "*"
        };
    }

    /*
     * TODO: @cictrone
     */
     rpc Delete(DeleteRequest) returns (DeleteResponse) {
        option (google.api.http) = {
            post: "/api/v1/targets/delete"
            body: "*"
        };
    }

    /*
     * TODO: @cictrone
     */
    rpc AddCredential(AddCredentialRequest) returns (AddCredentialResponse) {
        option (google.api.http) = {
            post: "/api/v1/targets/addCredential"
            body: "*"
        };
    }

}

message FetchRequest {
    int64 id = 1;
}
message FetchResponse {
    string name = 1;
    string machineUUID  = 2;
    string primaryIP = 3;
    string publicIP = 4;
    string primaryMAC = 5;
    string hostname = 6;
    int64 lastSeen = 7;
    repeated int64 tags = 8;
    repeated int64 tasks = 9;
    repeated int64 credentials = 10;
}

message FindRequest {
    string filter = 1;
    int64 offset = 2;
    int64 limit = 3;
}
message FindResponse {
    repeated int64 ids = 1;
    int64 newOffset = 2;
}


message CreateRequest {
    string name = 1;
    string primaryIP = 2;
    repeated string tags = 3;
}
message CreateResponse {
    int64 id = 1;
}

message SetTargetFieldsRequest {
    int64 id = 1;
    string name = 2;
    string machineUUID  = 3;
    string primaryIP = 4;
    string publicIP = 5;
    string primaryMAC = 6;
    string hostname = 7;
}

message SetTargetFieldsResponse {}

message DeleteRequest {
    int64 id = 1;
}

message DeleteResponse {}

message AddCredentialRequest {
    int64 targetID = 1;
    string principal = 2;
    string secret = 3;
}
message AddCredentialResponse {}