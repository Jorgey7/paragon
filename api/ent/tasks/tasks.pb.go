// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tasks.proto

package tasks

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FetchRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *FetchRequest) Reset()      { *m = FetchRequest{} }
func (*FetchRequest) ProtoMessage() {}
func (*FetchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3834c8ef8464a3f, []int{0}
}
func (m *FetchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchRequest.Merge(m, src)
}
func (m *FetchRequest) XXX_Size() int {
	return m.Size()
}
func (m *FetchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchRequest proto.InternalMessageInfo

func (m *FetchRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (*FetchRequest) XXX_MessageName() string {
	return "tasks.FetchRequest"
}

type FetchResponse struct {
	QueueTime     int64    `protobuf:"varint,1,opt,name=queueTime,proto3" json:"queueTime,omitempty"`
	ClaimTime     int64    `protobuf:"varint,2,opt,name=claimTime,proto3" json:"claimTime,omitempty"`
	ExecStartTime int64    `protobuf:"varint,3,opt,name=execStartTime,proto3" json:"execStartTime,omitempty"`
	ExecStopTime  int64    `protobuf:"varint,4,opt,name=execStopTime,proto3" json:"execStopTime,omitempty"`
	Content       string   `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	Output        []string `protobuf:"bytes,6,rep,name=output,proto3" json:"output,omitempty"`
	Error         string   `protobuf:"bytes,7,opt,name=error,proto3" json:"error,omitempty"`
	SessionID     string   `protobuf:"bytes,8,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Tags          []int64  `protobuf:"varint,9,rep,packed,name=tags,proto3" json:"tags,omitempty"`
	Job           int64    `protobuf:"varint,10,opt,name=job,proto3" json:"job,omitempty"`
}

func (m *FetchResponse) Reset()      { *m = FetchResponse{} }
func (*FetchResponse) ProtoMessage() {}
func (*FetchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3834c8ef8464a3f, []int{1}
}
func (m *FetchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchResponse.Merge(m, src)
}
func (m *FetchResponse) XXX_Size() int {
	return m.Size()
}
func (m *FetchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchResponse proto.InternalMessageInfo

func (m *FetchResponse) GetQueueTime() int64 {
	if m != nil {
		return m.QueueTime
	}
	return 0
}

func (m *FetchResponse) GetClaimTime() int64 {
	if m != nil {
		return m.ClaimTime
	}
	return 0
}

func (m *FetchResponse) GetExecStartTime() int64 {
	if m != nil {
		return m.ExecStartTime
	}
	return 0
}

func (m *FetchResponse) GetExecStopTime() int64 {
	if m != nil {
		return m.ExecStopTime
	}
	return 0
}

func (m *FetchResponse) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *FetchResponse) GetOutput() []string {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *FetchResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *FetchResponse) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *FetchResponse) GetTags() []int64 {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *FetchResponse) GetJob() int64 {
	if m != nil {
		return m.Job
	}
	return 0
}

func (*FetchResponse) XXX_MessageName() string {
	return "tasks.FetchResponse"
}

type FindRequest struct {
	Filter string `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Offset int64  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int64  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *FindRequest) Reset()      { *m = FindRequest{} }
func (*FindRequest) ProtoMessage() {}
func (*FindRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3834c8ef8464a3f, []int{2}
}
func (m *FindRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindRequest.Merge(m, src)
}
func (m *FindRequest) XXX_Size() int {
	return m.Size()
}
func (m *FindRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindRequest proto.InternalMessageInfo

func (m *FindRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *FindRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *FindRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (*FindRequest) XXX_MessageName() string {
	return "tasks.FindRequest"
}

type FindResponse struct {
	Ids       []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	NewOffset int64   `protobuf:"varint,2,opt,name=newOffset,proto3" json:"newOffset,omitempty"`
}

func (m *FindResponse) Reset()      { *m = FindResponse{} }
func (*FindResponse) ProtoMessage() {}
func (*FindResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3834c8ef8464a3f, []int{3}
}
func (m *FindResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindResponse.Merge(m, src)
}
func (m *FindResponse) XXX_Size() int {
	return m.Size()
}
func (m *FindResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindResponse proto.InternalMessageInfo

func (m *FindResponse) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *FindResponse) GetNewOffset() int64 {
	if m != nil {
		return m.NewOffset
	}
	return 0
}

func (*FindResponse) XXX_MessageName() string {
	return "tasks.FindResponse"
}

type ClaimRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *ClaimRequest) Reset()      { *m = ClaimRequest{} }
func (*ClaimRequest) ProtoMessage() {}
func (*ClaimRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3834c8ef8464a3f, []int{4}
}
func (m *ClaimRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimRequest.Merge(m, src)
}
func (m *ClaimRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClaimRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimRequest proto.InternalMessageInfo

func (m *ClaimRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (*ClaimRequest) XXX_MessageName() string {
	return "tasks.ClaimRequest"
}

type ClaimResponse struct {
}

func (m *ClaimResponse) Reset()      { *m = ClaimResponse{} }
func (*ClaimResponse) ProtoMessage() {}
func (*ClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3834c8ef8464a3f, []int{5}
}
func (m *ClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimResponse.Merge(m, src)
}
func (m *ClaimResponse) XXX_Size() int {
	return m.Size()
}
func (m *ClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimResponse proto.InternalMessageInfo

func (*ClaimResponse) XXX_MessageName() string {
	return "tasks.ClaimResponse"
}
func init() {
	proto.RegisterType((*FetchRequest)(nil), "tasks.FetchRequest")
	golang_proto.RegisterType((*FetchRequest)(nil), "tasks.FetchRequest")
	proto.RegisterType((*FetchResponse)(nil), "tasks.FetchResponse")
	golang_proto.RegisterType((*FetchResponse)(nil), "tasks.FetchResponse")
	proto.RegisterType((*FindRequest)(nil), "tasks.FindRequest")
	golang_proto.RegisterType((*FindRequest)(nil), "tasks.FindRequest")
	proto.RegisterType((*FindResponse)(nil), "tasks.FindResponse")
	golang_proto.RegisterType((*FindResponse)(nil), "tasks.FindResponse")
	proto.RegisterType((*ClaimRequest)(nil), "tasks.ClaimRequest")
	golang_proto.RegisterType((*ClaimRequest)(nil), "tasks.ClaimRequest")
	proto.RegisterType((*ClaimResponse)(nil), "tasks.ClaimResponse")
	golang_proto.RegisterType((*ClaimResponse)(nil), "tasks.ClaimResponse")
}

func init() { proto.RegisterFile("tasks.proto", fileDescriptor_b3834c8ef8464a3f) }
func init() { golang_proto.RegisterFile("tasks.proto", fileDescriptor_b3834c8ef8464a3f) }

var fileDescriptor_b3834c8ef8464a3f = []byte{
	// 537 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0xbd, 0x6e, 0x13, 0x4d,
	0x14, 0xdd, 0xf1, 0x7a, 0x9d, 0xcf, 0x37, 0xf6, 0x97, 0x68, 0x6c, 0xa2, 0x91, 0x15, 0x8d, 0xac,
	0x15, 0x85, 0x45, 0x11, 0x0b, 0xe8, 0x28, 0x28, 0x20, 0xb2, 0x44, 0x03, 0xd2, 0x26, 0x2f, 0xb0,
	0xb1, 0xc7, 0x66, 0xc0, 0xde, 0x71, 0x76, 0xc6, 0x80, 0x84, 0x90, 0x10, 0x4f, 0x80, 0xc4, 0x13,
	0xd0, 0xf1, 0x08, 0x94, 0x94, 0x29, 0x2d, 0xd1, 0xa4, 0xc4, 0xbb, 0x14, 0x94, 0x91, 0x68, 0x28,
	0xd1, 0xdc, 0x1d, 0xff, 0x6c, 0x41, 0x77, 0xcf, 0xb9, 0x67, 0xee, 0x9e, 0x39, 0x73, 0x17, 0xf6,
	0x4d, 0xac, 0x5f, 0xea, 0x93, 0x79, 0xaa, 0x8c, 0xa2, 0x01, 0x82, 0x4e, 0x7b, 0xa2, 0x26, 0x0a,
	0x99, 0xbe, 0xad, 0x8a, 0x66, 0xe7, 0x78, 0xa2, 0xd4, 0x64, 0x2a, 0xfa, 0xf1, 0x5c, 0xf6, 0xe3,
	0x24, 0x51, 0x26, 0x36, 0x52, 0x25, 0xee, 0x68, 0xc8, 0xa1, 0x31, 0x10, 0x66, 0xf8, 0x3c, 0x12,
	0x97, 0x0b, 0xa1, 0x0d, 0xfd, 0x1f, 0x2a, 0x72, 0xc4, 0x48, 0x97, 0xf4, 0xfc, 0xa8, 0x22, 0x47,
	0xe1, 0xe7, 0x0a, 0x34, 0x9d, 0x40, 0xcf, 0x55, 0xa2, 0x05, 0x3d, 0x86, 0xfa, 0xe5, 0x42, 0x2c,
	0xc4, 0xb9, 0x9c, 0x09, 0x27, 0xdc, 0x12, 0xb6, 0x3b, 0x9c, 0xc6, 0x72, 0x86, 0xdd, 0x4a, 0xd1,
	0xdd, 0x10, 0xf4, 0x36, 0x34, 0xc5, 0x1b, 0x31, 0x3c, 0x33, 0x71, 0x6a, 0x50, 0xe1, 0xa3, 0xa2,
	0x4c, 0xd2, 0x10, 0x1a, 0x05, 0xa1, 0xe6, 0x28, 0xaa, 0xa2, 0xa8, 0xc4, 0x51, 0x06, 0x7b, 0x43,
	0x95, 0x18, 0x91, 0x18, 0x16, 0x74, 0x49, 0xaf, 0x1e, 0xad, 0x21, 0x3d, 0x82, 0x9a, 0x5a, 0x98,
	0xf9, 0xc2, 0xb0, 0x5a, 0xd7, 0xef, 0xd5, 0x23, 0x87, 0x68, 0x1b, 0x02, 0x91, 0xa6, 0x2a, 0x65,
	0x7b, 0xa8, 0x2f, 0x80, 0xf5, 0xab, 0x85, 0xd6, 0x52, 0x25, 0x4f, 0x4e, 0xd9, 0x7f, 0xd8, 0xd9,
	0x12, 0x94, 0x42, 0xd5, 0xc4, 0x13, 0xcd, 0xea, 0x5d, 0xbf, 0xe7, 0x47, 0x58, 0xd3, 0x43, 0xf0,
	0x5f, 0xa8, 0x0b, 0x06, 0x68, 0xca, 0x96, 0xe1, 0x19, 0xec, 0x0f, 0x64, 0x32, 0x5a, 0x47, 0x78,
	0x04, 0xb5, 0xb1, 0x9c, 0x1a, 0x91, 0x62, 0x3a, 0xf5, 0xc8, 0x21, 0x34, 0x36, 0x1e, 0x6b, 0x61,
	0x5c, 0x2e, 0x0e, 0x59, 0x63, 0x53, 0x39, 0x93, 0xc6, 0x85, 0x51, 0x80, 0xf0, 0x21, 0x34, 0x8a,
	0xa1, 0x2e, 0xf6, 0x43, 0xf0, 0xe5, 0x48, 0x33, 0x82, 0x4e, 0x6c, 0x69, 0xad, 0x27, 0xe2, 0xf5,
	0xb3, 0xdd, 0x91, 0x5b, 0xc2, 0x3e, 0xec, 0x63, 0x9b, 0xfb, 0xbf, 0x1e, 0xf6, 0x00, 0x9a, 0xae,
	0x5f, 0x7c, 0xe0, 0xde, 0x6f, 0x02, 0xc1, 0xb9, 0xdd, 0x23, 0xfa, 0x14, 0x02, 0x7c, 0x72, 0xda,
	0x3a, 0x29, 0xb6, 0x6c, 0x77, 0x43, 0x3a, 0xed, 0x32, 0x59, 0x9c, 0x0e, 0x3b, 0x1f, 0xbe, 0xff,
	0xfc, 0x54, 0x69, 0x53, 0x8a, 0x7b, 0xf6, 0xea, 0x6e, 0x1f, 0x45, 0xfd, 0xb7, 0x72, 0xf4, 0x8e,
	0x0e, 0xa0, 0x6a, 0xaf, 0x42, 0xe9, 0xfa, 0xe4, 0x36, 0xac, 0x4e, 0xab, 0xc4, 0xb9, 0x61, 0xb7,
	0x70, 0xd8, 0x01, 0x6d, 0x96, 0x86, 0xd1, 0x08, 0x02, 0xb4, 0xbc, 0xf1, 0xb5, 0x7b, 0xc1, 0x8d,
	0xaf, 0xd2, 0xad, 0x42, 0x8e, 0xa3, 0x58, 0xd8, 0x2a, 0xfb, 0xc2, 0x95, 0x7c, 0x40, 0xee, 0x3c,
	0x3a, 0x5d, 0xae, 0xb8, 0x77, 0xbd, 0xe2, 0xde, 0xcd, 0x8a, 0x93, 0x3f, 0x2b, 0x4e, 0xde, 0x67,
	0x9c, 0x7c, 0xc9, 0x38, 0xf9, 0x9a, 0x71, 0x72, 0x95, 0x71, 0xb2, 0xcc, 0x38, 0xf9, 0x91, 0x71,
	0xf2, 0x2b, 0xe3, 0xde, 0x4d, 0xc6, 0xc9, 0xc7, 0x9c, 0x7b, 0xdf, 0x72, 0x4e, 0xae, 0x72, 0x4e,
	0x96, 0x39, 0xf7, 0xae, 0x73, 0xee, 0x5d, 0xd4, 0xf0, 0x67, 0xba, 0xff, 0x37, 0x00, 0x00, 0xff,
	0xff, 0x08, 0xdb, 0x16, 0xd8, 0x96, 0x03, 0x00, 0x00,
}

func (this *FetchRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FetchRequest)
	if !ok {
		that2, ok := that.(FetchRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *FetchResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FetchResponse)
	if !ok {
		that2, ok := that.(FetchResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.QueueTime != that1.QueueTime {
		return false
	}
	if this.ClaimTime != that1.ClaimTime {
		return false
	}
	if this.ExecStartTime != that1.ExecStartTime {
		return false
	}
	if this.ExecStopTime != that1.ExecStopTime {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	if len(this.Output) != len(that1.Output) {
		return false
	}
	for i := range this.Output {
		if this.Output[i] != that1.Output[i] {
			return false
		}
	}
	if this.Error != that1.Error {
		return false
	}
	if this.SessionID != that1.SessionID {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	if this.Job != that1.Job {
		return false
	}
	return true
}
func (this *FindRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FindRequest)
	if !ok {
		that2, ok := that.(FindRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Filter != that1.Filter {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	return true
}
func (this *FindResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FindResponse)
	if !ok {
		that2, ok := that.(FindResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Ids) != len(that1.Ids) {
		return false
	}
	for i := range this.Ids {
		if this.Ids[i] != that1.Ids[i] {
			return false
		}
	}
	if this.NewOffset != that1.NewOffset {
		return false
	}
	return true
}
func (this *ClaimRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimRequest)
	if !ok {
		that2, ok := that.(ClaimRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *ClaimResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimResponse)
	if !ok {
		that2, ok := that.(ClaimResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *FetchRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tasks.FetchRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FetchResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&tasks.FetchResponse{")
	s = append(s, "QueueTime: "+fmt.Sprintf("%#v", this.QueueTime)+",\n")
	s = append(s, "ClaimTime: "+fmt.Sprintf("%#v", this.ClaimTime)+",\n")
	s = append(s, "ExecStartTime: "+fmt.Sprintf("%#v", this.ExecStartTime)+",\n")
	s = append(s, "ExecStopTime: "+fmt.Sprintf("%#v", this.ExecStopTime)+",\n")
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	s = append(s, "Output: "+fmt.Sprintf("%#v", this.Output)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "SessionID: "+fmt.Sprintf("%#v", this.SessionID)+",\n")
	s = append(s, "Tags: "+fmt.Sprintf("%#v", this.Tags)+",\n")
	s = append(s, "Job: "+fmt.Sprintf("%#v", this.Job)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FindRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tasks.FindRequest{")
	s = append(s, "Filter: "+fmt.Sprintf("%#v", this.Filter)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FindResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tasks.FindResponse{")
	s = append(s, "Ids: "+fmt.Sprintf("%#v", this.Ids)+",\n")
	s = append(s, "NewOffset: "+fmt.Sprintf("%#v", this.NewOffset)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClaimRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tasks.ClaimRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClaimResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&tasks.ClaimResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTasks(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TasksClient is the client API for Tasks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TasksClient interface {
	//
	// TODO: @cictrone
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error)
	//
	// TODO: @cictrone
	Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error)
	//
	// TODO: @cictrone
	Claim(ctx context.Context, in *ClaimRequest, opts ...grpc.CallOption) (*ClaimResponse, error)
}

type tasksClient struct {
	cc *grpc.ClientConn
}

func NewTasksClient(cc *grpc.ClientConn) TasksClient {
	return &tasksClient{cc}
}

func (c *tasksClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchResponse, error) {
	out := new(FetchResponse)
	err := c.cc.Invoke(ctx, "/tasks.Tasks/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error) {
	out := new(FindResponse)
	err := c.cc.Invoke(ctx, "/tasks.Tasks/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) Claim(ctx context.Context, in *ClaimRequest, opts ...grpc.CallOption) (*ClaimResponse, error) {
	out := new(ClaimResponse)
	err := c.cc.Invoke(ctx, "/tasks.Tasks/Claim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TasksServer is the server API for Tasks service.
type TasksServer interface {
	//
	// TODO: @cictrone
	Fetch(context.Context, *FetchRequest) (*FetchResponse, error)
	//
	// TODO: @cictrone
	Find(context.Context, *FindRequest) (*FindResponse, error)
	//
	// TODO: @cictrone
	Claim(context.Context, *ClaimRequest) (*ClaimResponse, error)
}

// UnimplementedTasksServer can be embedded to have forward compatible implementations.
type UnimplementedTasksServer struct {
}

func (*UnimplementedTasksServer) Fetch(ctx context.Context, req *FetchRequest) (*FetchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (*UnimplementedTasksServer) Find(ctx context.Context, req *FindRequest) (*FindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (*UnimplementedTasksServer) Claim(ctx context.Context, req *ClaimRequest) (*ClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Claim not implemented")
}

func RegisterTasksServer(s *grpc.Server, srv TasksServer) {
	s.RegisterService(&_Tasks_serviceDesc, srv)
}

func _Tasks_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasks.Tasks/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).Fetch(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasks.Tasks/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).Find(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_Claim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).Claim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tasks.Tasks/Claim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).Claim(ctx, req.(*ClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tasks_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tasks.Tasks",
	HandlerType: (*TasksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fetch",
			Handler:    _Tasks_Fetch_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _Tasks_Find_Handler,
		},
		{
			MethodName: "Claim",
			Handler:    _Tasks_Claim_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tasks.proto",
}

func (m *FetchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTasks(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FetchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Job != 0 {
		i = encodeVarintTasks(dAtA, i, uint64(m.Job))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Tags) > 0 {
		dAtA2 := make([]byte, len(m.Tags)*10)
		var j1 int
		for _, num1 := range m.Tags {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTasks(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTasks(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintTasks(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Output) > 0 {
		for iNdEx := len(m.Output) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Output[iNdEx])
			copy(dAtA[i:], m.Output[iNdEx])
			i = encodeVarintTasks(dAtA, i, uint64(len(m.Output[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintTasks(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ExecStopTime != 0 {
		i = encodeVarintTasks(dAtA, i, uint64(m.ExecStopTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ExecStartTime != 0 {
		i = encodeVarintTasks(dAtA, i, uint64(m.ExecStartTime))
		i--
		dAtA[i] = 0x18
	}
	if m.ClaimTime != 0 {
		i = encodeVarintTasks(dAtA, i, uint64(m.ClaimTime))
		i--
		dAtA[i] = 0x10
	}
	if m.QueueTime != 0 {
		i = encodeVarintTasks(dAtA, i, uint64(m.QueueTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FindRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintTasks(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.Offset != 0 {
		i = encodeVarintTasks(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Filter) > 0 {
		i -= len(m.Filter)
		copy(dAtA[i:], m.Filter)
		i = encodeVarintTasks(dAtA, i, uint64(len(m.Filter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FindResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewOffset != 0 {
		i = encodeVarintTasks(dAtA, i, uint64(m.NewOffset))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Ids) > 0 {
		dAtA4 := make([]byte, len(m.Ids)*10)
		var j3 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintTasks(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClaimRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTasks(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTasks(dAtA []byte, offset int, v uint64) int {
	offset -= sovTasks(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedFetchRequest(r randyTasks, easy bool) *FetchRequest {
	this := &FetchRequest{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFetchResponse(r randyTasks, easy bool) *FetchResponse {
	this := &FetchResponse{}
	this.QueueTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.QueueTime *= -1
	}
	this.ClaimTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ClaimTime *= -1
	}
	this.ExecStartTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ExecStartTime *= -1
	}
	this.ExecStopTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ExecStopTime *= -1
	}
	this.Content = string(randStringTasks(r))
	v1 := r.Intn(10)
	this.Output = make([]string, v1)
	for i := 0; i < v1; i++ {
		this.Output[i] = string(randStringTasks(r))
	}
	this.Error = string(randStringTasks(r))
	this.SessionID = string(randStringTasks(r))
	v2 := r.Intn(10)
	this.Tags = make([]int64, v2)
	for i := 0; i < v2; i++ {
		this.Tags[i] = int64(r.Int63())
		if r.Intn(2) == 0 {
			this.Tags[i] *= -1
		}
	}
	this.Job = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Job *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFindRequest(r randyTasks, easy bool) *FindRequest {
	this := &FindRequest{}
	this.Filter = string(randStringTasks(r))
	this.Offset = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Offset *= -1
	}
	this.Limit = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Limit *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFindResponse(r randyTasks, easy bool) *FindResponse {
	this := &FindResponse{}
	v3 := r.Intn(10)
	this.Ids = make([]int64, v3)
	for i := 0; i < v3; i++ {
		this.Ids[i] = int64(r.Int63())
		if r.Intn(2) == 0 {
			this.Ids[i] *= -1
		}
	}
	this.NewOffset = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.NewOffset *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedClaimRequest(r randyTasks, easy bool) *ClaimRequest {
	this := &ClaimRequest{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedClaimResponse(r randyTasks, easy bool) *ClaimResponse {
	this := &ClaimResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyTasks interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTasks(r randyTasks) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTasks(r randyTasks) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneTasks(r)
	}
	return string(tmps)
}
func randUnrecognizedTasks(r randyTasks, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldTasks(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldTasks(dAtA []byte, r randyTasks, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateTasks(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulateTasks(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulateTasks(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateTasks(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateTasks(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateTasks(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateTasks(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *FetchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTasks(uint64(m.Id))
	}
	return n
}

func (m *FetchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueueTime != 0 {
		n += 1 + sovTasks(uint64(m.QueueTime))
	}
	if m.ClaimTime != 0 {
		n += 1 + sovTasks(uint64(m.ClaimTime))
	}
	if m.ExecStartTime != 0 {
		n += 1 + sovTasks(uint64(m.ExecStartTime))
	}
	if m.ExecStopTime != 0 {
		n += 1 + sovTasks(uint64(m.ExecStopTime))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovTasks(uint64(l))
	}
	if len(m.Output) > 0 {
		for _, s := range m.Output {
			l = len(s)
			n += 1 + l + sovTasks(uint64(l))
		}
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovTasks(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTasks(uint64(l))
	}
	if len(m.Tags) > 0 {
		l = 0
		for _, e := range m.Tags {
			l += sovTasks(uint64(e))
		}
		n += 1 + sovTasks(uint64(l)) + l
	}
	if m.Job != 0 {
		n += 1 + sovTasks(uint64(m.Job))
	}
	return n
}

func (m *FindRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Filter)
	if l > 0 {
		n += 1 + l + sovTasks(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovTasks(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovTasks(uint64(m.Limit))
	}
	return n
}

func (m *FindResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovTasks(uint64(e))
		}
		n += 1 + sovTasks(uint64(l)) + l
	}
	if m.NewOffset != 0 {
		n += 1 + sovTasks(uint64(m.NewOffset))
	}
	return n
}

func (m *ClaimRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTasks(uint64(m.Id))
	}
	return n
}

func (m *ClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTasks(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTasks(x uint64) (n int) {
	return sovTasks(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FetchRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FetchRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FetchResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FetchResponse{`,
		`QueueTime:` + fmt.Sprintf("%v", this.QueueTime) + `,`,
		`ClaimTime:` + fmt.Sprintf("%v", this.ClaimTime) + `,`,
		`ExecStartTime:` + fmt.Sprintf("%v", this.ExecStartTime) + `,`,
		`ExecStopTime:` + fmt.Sprintf("%v", this.ExecStopTime) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`Output:` + fmt.Sprintf("%v", this.Output) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`SessionID:` + fmt.Sprintf("%v", this.SessionID) + `,`,
		`Tags:` + fmt.Sprintf("%v", this.Tags) + `,`,
		`Job:` + fmt.Sprintf("%v", this.Job) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FindRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FindRequest{`,
		`Filter:` + fmt.Sprintf("%v", this.Filter) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FindResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FindResponse{`,
		`Ids:` + fmt.Sprintf("%v", this.Ids) + `,`,
		`NewOffset:` + fmt.Sprintf("%v", this.NewOffset) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClaimRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClaimRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClaimResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClaimResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringTasks(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FetchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTasks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTasks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTasks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueueTime", wireType)
			}
			m.QueueTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueueTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimTime", wireType)
			}
			m.ClaimTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecStartTime", wireType)
			}
			m.ExecStartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecStartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecStopTime", wireType)
			}
			m.ExecStopTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecStopTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTasks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTasks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTasks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTasks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Output = append(m.Output, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTasks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTasks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTasks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTasks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTasks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Tags = append(m.Tags, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTasks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTasks
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTasks
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Tags) == 0 {
					m.Tags = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTasks
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Tags = append(m.Tags, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			m.Job = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Job |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTasks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTasks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTasks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTasks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTasks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTasks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTasks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTasks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTasks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTasks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTasks
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTasks
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTasks
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOffset", wireType)
			}
			m.NewOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewOffset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTasks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTasks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTasks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTasks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTasks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTasks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTasks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTasks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTasks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTasks(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTasks
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTasks
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTasks
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTasks
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTasks        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTasks          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTasks = fmt.Errorf("proto: unexpected end of group")
)
